#
# Copyright (C) 2009-2017 Lightbend Inc. <https://www.lightbend.com>
#

# Hack to override some of Akka's defaults in Play

# Play's config file loading logic will load this file with a higher
# priority than reference.conf, but a lower priority than application.conf.
# That allows Play to override Akka's reference.conf (which can't happen
# from in Play's own reference.conf), but still allow users to override
# Play's settings in their application.conf.

akka {

  # Play applications should exit when Akka receives a fatal error.
  # If we don't stop the JVM we would have a stale application that
  # can't handle requests since the Akka system is shutdown only.
  jvm-exit-on-fatal-error = true

  actor {
    default-dispatcher = {
      fork-join-executor {
        # Settings this to 1 instead of 3 seems to improve performance.
        parallelism-factor = 1.0

        # @richdougherty: Not sure why this is set below the Akka
        # default.
        parallelism-max = 24

        # Setting this to LIFO changes the fork-join-executor
        # to use a stack discipline for task scheduling. This usually
        # improves throughput at the cost of possibly increasing
        # latency and risking task starvation (which should be rare).
        task-peeking-mode = LIFO
      }
    }
  }

  # Tell akka to use Slf4jLogger and filter
  loglevel = DEBUG
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  # CoordinatedShutdown is an extension introduced in Akka 2.5 that will
  # perform registered tasks in the order that is defined by the phases.
  # This setup extends Akka's default phases with Play-specific ones.
  coordinated-shutdown {

    # Terminate the ActorSystem in the last phase actor-system-terminate.
    terminate-actor-system = on

    # Exit the JVM (System.exit(0)) in the last phase actor-system-terminate
    # if this is set to 'on'. It is done after termination of the
    # ActorSystem if terminate-actor-system=on, otherwise it is done
    # immediately when the last phase is reached.
    exit-jvm = off

    # Run the coordinated shutdown when the JVM process exits, e.g.
    # via kill SIGTERM signal (SIGINT ctrl-c doesn't work).
    run-by-jvm-shutdown-hook = on

    #//#coordinated-shutdown-phases-play-overrides
    phases {

      # application-stop-hooks phase will run the stop hooks registered
      # in Play's ApplicationLifecycle. Stop hooks in ApplicationLifecycle
      # are run in reverse order than they where registered.
      # Other tasks registered in this phase directly will run in parallel
      # to Play's stop hooks.
      # This phase depends on Akka's default 'service-stop'
      application-stop-hooks {
        depends-on = [service-stop]
      }

      # Once the service and the application are stopped Play needs to run
      # server cleanup code.
      play-server-stop {
        depends-on = [application-stop-hooks]
      }

      # Once the server cleanup completes the server is considered stopped.
      # In this phase it's possible to include custom server hooks to run after
      # server is shutdown.
      after-play-server-stop {
        depends-on = [play-server-stop]
      }

      # This overrides Akka's default 'before-cluster-shutdown' in order to
      # add 'application-stop-hooks' and 'after-server-stop' in the
      # default graph of shutdown phases.
      # Note this defaults run the complete play Server shutdown before
      # shutting down the Akka cluster, the actor system or exiting the JVM.
      before-cluster-shutdown {
        depends-on = [service-stop, after-play-server-stop]
      }

    }
    #//#coordinated-shutdown-phases-play-overrides
  }

}
