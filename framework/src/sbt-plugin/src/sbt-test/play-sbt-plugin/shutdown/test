# Structure of this test:
# =======================

# This test asserts the correct shutdown setups for Mode.Dev (using PlayNonBlockingInteractionMode)
# and Mode.Prod (using `runProd --no-exit-sbt`)

# The test is split in two halves: first the Mode.Dev is tested and the the Mode.Prod.
# `clean` is used in few places to ensure `target` doesn't contain files from previous steps. Eventually,
# this should be replaced by faster, specific file-deletion.

# Each tests asserts:
#  1. creation and destruction of a pid file
#  2. proof of existence for each actor system (proof an actor system's Coordinated shutdown did run). This is
#     achieved by registering a CS.addTask("application-cs-proof-of-existence)" that creates a well-known file when run.
#  3. triggering the Coordinated Shutdown (was it code triggered or SIGTERM triggered)




### ---------------
### Mode.Prod tests
### ---------------

## Cleanup previous execution leftovers.
$ delete target/universal/stage/RUNNING_PID
-$ exists target/universal/stage/RUNNING_PID
$ delete target/proofs/application-actorsystem-name.txt
-$ exists target/proofs/application-actorsystem-name.txt


## Start prod mode
> runProd --no-exit-sbt

# The app started (wait few seconds for the app to start)
$ sleep 3
> verifyResourceContains / 200

# Mode.Prod creates a PID_FILE
$ exists target/universal/stage/RUNNING_PID

# SIGTERM-ing Mode.Prod runs Coordinated Shutdown for a single Actor System
# Mode.Prod exits runs the Coordinated Shutdown when there's a SIGTERM
#> sigtermApplication
#> assertActorSystemProofOfExistence application-actorsystem-name

# Mode.Prod exits the JVM
#> assertProcessIsStopped

> stopProd --no-exit-sbt
> awaitPidfileDeletion
$ exists target/proofs/application-actorsystem-name.txt
-$ exists target/universal/stage/RUNNING_PID




### ---------------
### Mode.Test tests
### ---------------

## Cleanup previous execution leftovers.
$ delete target/universal/stage/RUNNING_PID
-$ exists target/universal/stage/RUNNING_PID
$ delete target/proofs/application-actorsystem-name.txt
-$ exists target/proofs/application-actorsystem-name.txt


## Run user integration tests
> test

# Mode.Test doesn't create a PID_FILE but runs CoordinatedShutdown
-$ exists target/universal/stage/RUNNING_PID
$ exists target/proofs/application-actorsystem-name.txt






### --------------
### Mode.Dev tests
### --------------


## Cleanup previous execution leftovers.

# there may be a forked running process from previous executions
# stop previously running processes (may trigger Akka's CS so must be done before file cleanup)
> stopProd --no-exit-sbt

#  - cleanActorSystemProofOfExistence
$ delete target/proofs/application-actorsystem-name.txt
-$ exists target/proofs/application-actorsystem-name.txt

#  - cleanPidFile
$ delete target/universal/stage/RUNNING_PID
-$ exists target/universal/stage/RUNNING_PID




## Start dev mode
> run

## Mode.Dev doesn't create a PID_FILE
-$ exists target/universal/stage/RUNNING_PID

# The app started
> verifyResourceContains / 200

## Stopping Mode.Dev runs Coordinated Shutdown in both Server and Application Actor Systems
> playStop
$ exists target/proofs/application-actorsystem-name.txt

# Asserting the `play-dev-mode` CS was executed is tricky because it's not available to the user
# # $ exists target/proofs/play-dev-mode.txt

## Dev.Mode doesn't exit the JVM
#  - This step is implicitly verified if the test moves forward because the JVM is still alive.

